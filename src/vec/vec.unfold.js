import {
  throwIfGeneratorFunction,
  throwIfNotFunction,
  throwIfNullOrUndefined,
} from '../throwHelper';
import { isNotNull, isNotUndefined } from '../util';
import Vec from './vec.core';

/** @module */

/**
 * <h3> unfold(generator, state) â‡’ Vec </h3>
 * Returns a vector that contains the elements generated by the given computation.
 * The given initial state argument is passed to the element generator.
 * @param generator A function that takes in the current state and
 * returns an array containing next element of the vector and the next state value.
 * @param state The initial state value.
 * @returns {Vec} The result vector.
 * @exception {TypeError} When generator is not a function or generator is a generator function.
 * @example
 * const oneToTwenty = Vec.unfold(x => x <= 20 ? [x, x + 1] : undefined, 1);
 * console.log(oneToTwenty);
 * // => [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 ]
 * const fib = (n) => Vec.unfold(([x, [a, b]]) => (x < n ? [a + b, [x + 1, [b, a + b]]] : null), [0, [0, 1]]);
 * const fibSeries = fib(10);
 * console.log(fibSeries);
 * // => [ 1, 2, 3, 5, 8, 13, 21, 34, 55, 89 ]
 */
function unfold(generator, state) {
  throwIfNullOrUndefined(state, 'state');
  throwIfNotFunction(generator, 'generator');
  throwIfGeneratorFunction(generator, 'generator');

  const result = new Vec();

  (function loop(s) {
    const gs = generator(s);
    if (isNotNull(gs) && isNotUndefined(gs)) {
      const [fst, snd] = gs;
      result.push(fst);
      if (isNotNull(snd) && isNotUndefined(snd)) {
        loop(snd);
      }
    }
  }(state));

  return result;
}

export default unfold;
