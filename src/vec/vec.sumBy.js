import { isNumber } from '../util';
import {
  throwIfGeneratorFunction,
  throwIfNotFunction,
  throwIfNullOrUndefined,
} from '../throwHelper';

/** @module */

/**
 * <h3> sumBy(projection) â‡’ number|undefined </h3>
 * Returns the sum of the results generated by applying the function to each element of the vector.
 * @param projection The function to transform the vector elements into the type to be summed.
 * @returns {number|undefined} The resulting sum.
 * @example
 * const hundredNumbers = Vec.init(100, x => x + 1);
 * const sumOfEvens = hundredNumbers.sumBy(x => x % 2 === 0 ? x : 0);
 * console.log(sumOfEvens);
 * // => 2550
 * const sumOfOdds = hundredNumbers.sumBy(x => x % 2 === 1 ? x : 0);
 * console.log(sumOfOdds);
 * // => 2500
 */
function sumBy(projection) {
  throwIfNullOrUndefined(this, 'this');
  throwIfNotFunction(projection, 'projection');
  throwIfGeneratorFunction(projection, 'projection');

  let thisArg;

  if (arguments.length > 1) {
    thisArg = arguments[1];
  }

  if (this.length === 0) {
    return undefined;
  }

  let sumNum = 0;

  for (let i = 0; i < this.length; i += 1) {
    const projected = projection.call(thisArg, this[i]);
    if (isNumber(projected)) {
      sumNum += projected;
    }
  }

  return sumNum;
}

export default sumBy;
